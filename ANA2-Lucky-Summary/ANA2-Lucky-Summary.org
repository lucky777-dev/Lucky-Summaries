#+latex_class: luckypdf
#+language: fr
#+title: ANA2 - Lucky Summary
#+author: Sm!le42

* Diagramme d'activité
** Transitions automatiques
#+caption: Transitions automatiques
#+attr_latex: :width 100px :placement [h]
file:TransitionsAutomatiques.png
Une fois l'activité 1 terminée, on passe automatiquement à l'activité 2.
** Début et Fin
#+caption: Début et Fin
#+attr_latex: :width 100px :placement [H]
file:DebutEtFin.png
Le /rond gris/ représente le *début* du programme, et le /rond gris entouré d'un cercle/ représente la *fin* du programme (fin normale ou fin après erreur).
** Conditions
#+caption: Conditions
#+attr_latex: :width 200px :placement [H]
file:Conditions.png
Arrivé au /losange (=condition)/, il y a *plusieurs possibilités*, ici soit *cas a*, soit *cas b*. \color{luckydarkgray}(If, Then, Else)\color{black}
** Itérations (boucles)
#+caption: Itérations
#+attr_latex: :width 200px :placement [H]
file:Iterations.png
Les /instructions/ seront exécutées *en boucle* tant que la /condition (losange)/ est *vraie*. \color{luckydarkgray}(For, While)\color{black}
* Classes et objets
** Classes
#+begin_src java
//Exemple de classe Compte en Java
public class Compte {
   //solde > decouvertMax
   private int numero;
   private int solde;
   private int decouvertMax;

   public Compte(int numero, int solde) {
      //...
   }

   public int consulterSolde() {
      //...
      return int;
   }

   public void crediter(int somme) {
      //...
   }

   public void debiter(int somme) {
      //... (solde > decouvertMax)
   }
}
#+end_src
Représentation UML de la classe Compte:
#+caption: Classes
#+attr_latex: :width 150px :placement [H]
file:Classes.png
*** Visibilités
Il existe 4 types de visibilité:
#+attr_latex: :align |c|c|
|----+-----------|
| +  | public    |
|----+-----------|
| -- | private   |
|----+-----------|
| ~  | package   |
|----+-----------|
| #  | protected |
|----+-----------|
**** *public +*

La visibilité /public/ signifie que les données sont accessibles depuis n'importe où.
**** *private --*

La visibilité /private/ signifie que les données ne sont accessibles que depuis la même classe.
**** *package ~*

La visibilité /package/ signifie que les données ne sont accessibles que depuis le même package.
**** *protected #*

La visibilité /protected/ signifie que les données ne sont accessibles que depuis le même package ou les sous-classes.
*** Attributs
Les attributs d'une classe sont notés de la manière suivante:
#+begin_verse
\hlg{Visibilite} \hlr{Type} \hlb{Nom} ;

\textcolor{luckydarkgray}{Ex:}
\textcolor{luckydarkgreen}{private} \textcolor{luckydarkred}{int} \textcolor{luckydarkblue}{numero};
#+end_verse
*** Opérations
Les opérations d'une classe sont notées de la manière suivante:
#+begin_verse
\hlg{Visibilite} \hlr{Type de retour} \hlb{Nom} (\hly{Parametres}) {...}

\textcolor{luckydarkgray}{Ex:}
\textcolor{luckydarkgreen}{public} \textcolor{luckydarkred}{String} \textcolor{luckydarkblue}{getNom}(\hly{int numero}) {...}
\color{luckydarkgray}(Cette méthode prend donc un int en paramètre, et retournera un String)\color{black}
#+end_verse
** Objets
Exemple d'objets de la classe *Compte* (vue plus haut):
#+caption: Objets
#+attr_latex: :width 250px :placement [H]
file:Objets.png
**** *Identité:*

Permet d'identifier un objet.
**** *État:*

Caractéristiques de l'objet à un moment donné (Valeurs des attributs).
**** *Comportement:*

Ensemble des opérations qu'un objet peut exécuter ou subir.
- Create
- Read
- Update
- Delete
  
* Associations
Connexions sémantiques durables entre des classes.
** Associations 1-1 et 1-N
#+caption: Associations 1-1 1-N
#+attr_latex: :width 400px :placement [H]
file:Associations111N.png
**** *Exemple "banque":*

<<Banque>>
Principe de banque avec des clients et des comptes /(Java + UML)/:
#+begin_src java
//Classe Client
public class Client {
   private final String nom;
   private final String prenom;
   private final Compte compte;

   public Client(String nom, String prenom, Compte compte) {...}
   public String getNom() {...}
   public String getPrenom() {...}
   public Compte getCompte() {...}
}
#+end_src
#+begin_src java
//Classe Compte
public class Compte {
   private final String numero;
   private int solde;
   private final Client titulaire;

   public Compte(String numero, int solde, Client titulaire) {...}
   public String getNumero() {...}
   public int getSolde() {...}
   public Client getTitulaire() {...}
}
#+end_src
Représentation UML de l'association des classes Client et Compte:
#+caption: Associations Client Compte (Exemple)
#+attr_latex: :width 450px :placement [H]
file:Associations111NEx.png
Ainsi, si on créé un Client "pierre" et qu'on lui attribue le compte "c1", on peut dire ceci:
#+caption: Pierre: c1
#+attr_latex: :width 300px :placement [H]
file:Associations111NEx2.png
- pierre a pour compte c1
- c1 joue le rôle de compte pour pierre
- pierre joue le rôle de titulaire pour c1
- le /(un des)/ compte /(s)/ de pierre est c1
- le /(un des)/ titulaire /(s)/ de c1 est pierre
**** *Exemple "memory":*

<<Memory>>
Petit jeu de mémoire nommé "memory" /(Java + UML)/:
#+begin_src java
//Classe Memory
public class Memory {
   private final Game game;
}
//Classe Card
public class Card {
   private boolean hidden;
   private int value;
}
//Classe Game
public class Game {
   private Card cards; //Ici une seule carte possible!
}
#+end_src
Représentation UML du jeu "memory":
#+caption: Associations "memory" (Exemple)
#+attr_latex: :width 400px :placement [H]
file:Associations111NEx3.png
** Associations N-N
*** Multiplicités
Désigne le *nombre d'objets* qui peuvent participer à une *association*.

*Syntaxe:* {minimum} .. {maximum}

Les plus courants:
- *0..1* \color{luckydarkgray}(= 0 ou 1)\color{black}
- *1..1* \textcolor{luckydarkgray}{ou} *1* \color{luckydarkgray}(= 1)\color{black}
- *0..n* \textcolor{luckydarkgray}{ou} *n* \textcolor{luckydarkgray}{ou} *0..** \textcolor{luckydarkgray}{ou} *** \color{luckydarkgray}(= tout)\color{black}
- *1..n* \textcolor{luckydarkgray}{ou} *1..** \color{luckydarkgray}(= 1 ou plus)\color{black}

Autres:
- *7..14* \color{luckydarkgray}(= de 7 à 14)\color{black}
- *0..21* \color{luckydarkgray}(= de 0 à 21)\color{black}
- *42..** \color{luckydarkgray}(= 42 ou plus)\color{black}

Remarques:
- *** = *0..** \color{luckydarkgray}(= tout)\color{black}
- *3* = *3..3* \color{luckydarkgray}(= 3)\color{black}
**** *Exemple "memory":*

Reprenons l'exemple [[Memory]["memory"]] (vu plus haut) mais avec de multiples cartes:
#+caption: Associations "memory" multiplicités (Exemple)
#+attr_latex: :width 400px :placement [H]
file:AssociationsNNEx3.png
À gauche:
- À un objet Memory correspond un et un seul objet Game
- À un objet Game correspond un et un seul objet Memory
À droite:
- À un objet Card correspond un et un seul objet Game
- À un objet Game correspond 0 à plusieurs objets Card
**** *Exemple "banque":*

Prenons un exemple similaire à l'exemple [[Banque]["banque"]] (vu plus haut):
#+caption: Associations Client/Comptes multiplicités (Exemple)
#+attr_latex: :width 400px :placement [H]
file:AssociationsNNEx4.png
On en déduit que:
- Un compte a un et un seul titulaire
- Un client peut n'être titulaire d'aucun compte, de un, ou plusieurs comptes
- Un compte peut n'avoir aucun mandataire, ou un, ou plusieurs
- Un client peut n'être mandataire d'aucun compte, de un, ou de plusieurs comptes
**** *Exemple "université":*

 Une université veut informatiser son administration pour gérer plus facilement les dossiers *étudiants*. Les étudiants ont un /identifiant/ et un /nom/. Un étudiant fait partie d'un *département*. Ces derniers sont regroupés dans des *facultés*.

Voici un diagramme UML représentant cette structure:
#+caption: Associations "université" (Exemple)
#+attr_latex: :width 400px :placement [H]
file:AssociationsNNEx5.png
Et son code Java ressemblerait à ceci:
#+begin_src java
//Classe Faculte
public class Faculte {
   private String nom;
   private List<Departement> departements;
   //...
}
//Classe Departement
public class Departement {
   private String nom;
   private List<Etudiant> etudiants;
   //...
}
//Classe Etudiant
public class Etudiant {
   private String id;
   private String nom;
   //...
}
#+end_src
* Énumérations, structures et compositions
** Énumérations
Une énumération n'a *jamais* d'association.
**** *Exemple "saison":*

Code Java:
#+begin_src java
//Exemple Saison
public enum Saison {
   ETE, AUTOMNE, HIVER, PRINTEMPS;
}
#+end_src
Diagramme UML:
#+caption: Énumérations de saisons (Exemple)
#+attr_latex: :width 400px :placement [H]
file:Enumerations.png
**** *Exemple "saison2":*

Classe saison2 /(Java + UML)/:
#+begin_src java
//Exemple Saison2
public enum Saison2 {
   PRINTEMPS (21, 3), ETE (22, 6), AUTOMNE (23, 9), HIVER (21, 12);

   private final LocalDate dateDebut;

   private Saison2(int jour, int mois) {
      LocalDate now = LocalDate.now();
      this.dateDebut = LocalDate.of(now.getYear(), mois, jour);
   }

   public LocalDate getDateDebut() {
      return this.dateDebut;
   }

   public Saison2 next() {
      Saison2[] saisons2 = this.values();
      return saisons2[(this.ordinal() + 1) % saisons2.length];
   }
}
#+end_src
Code UML:
#+caption: Saison2
#+attr_latex: :width 150px :placement [H]
file:EnumerationsEx1.png
** Structures
#+caption: Structures (Exemple)
#+attr_latex: :width 300px :placement [H]
file:Structures.png
Code Java de la structure /Adresse/:
#+begin_src java
//Classe Adresse
public class Adresse {
   public TypeVoie typeVoie;
   public String nomVoie;
   public int numero;
   public int codePostal;
   public String localite;
}
//Enumeration TypeVoie
public enum TypeVoie {
   AVENUE, RUE, CHAUSSEE, BOULEVARD;
}
#+end_src
** Compositions
"Est composé de...", "fait partie de..."
#+caption: Compositions (Exemples)
#+attr_latex: :width 200px :placement [H]
file:Compositions.png
* Classes d'association
Élément de modélisation /UML/ qui a les propriétés d'une *classe* et d'une *association*.
**** *Exemple "emplois":*

On donne des emplois dans des sociétés à des employés, et on veut que les employés puissent avoir *deux emplois maximum*, mais *pas dans la même société*:
#+caption: Classes d'association (1 seul emploi par société)
#+attr_latex: :width 200px :placement [H]
file:ClassesDassociation.png

Ceci correspond à cette représentation /UML/:
#+caption: Classes d'association 2 (1 seul emploi par société)
#+attr_latex: :width 300px :placement [H]
file:ClassesDassociation2.png

Le code Java de la classe Personne ressemblerait alors à ceci:
#+begin_src java
//Classe Personne
public class Personne {
   private String id;
   private String nom;
   private Emploi[] emplois; //Liste des emplois actifs
   private int nbEmplois; //Nombre d'emplois actifs
   //Constructeurs, getter, setters...

   public void ajouterEmploi(Emploi e) {
      if (nbEmplois == 2) {
         throw new IllegalArgumentException("Deux emplois max!");
      }
      if (estEmployéDans(e.getSociete()) {
         throw new IllegalArgumentException("Un seul emploi par société!");
      } else {
         emplois[nbEmplois] = e;
         nbEmplois++;
      }
   }

   public boolean estEmployéDans(Societe s) {
      for (Emploi e : emplois) {
         if (e.getSociete().equals(s)) {
            return true;
         }
      }
      return false;
   }
}
#+end_src
** Associations N-aire
Associations ternaires, quaternaires, etc...
**** *Exemple "cours":*

Diagramme /UML/ des liens entre un professeur, un local, une matière et des étudiants:
#+caption: Associations N-aire
#+attr_latex: :width 250px :placement [H]
file:AssociationsNaire.png

Représentation détaillée:
#+caption: Associations N-aire 2
#+attr_latex: :width 250px :placement [H]
file:AssociationsNaire2.png
* Héritages
Classification des classes dans une hiérarchie.
**** *Exemple "point":*

Diagramme /UML/ d'une classe /Point/ et d'une classe /ColoredPoint/ qui *hérite* de /Point/:
#+caption: Heritages
#+attr_latex: :width 300px :placement [H]
file:Heritages.png

Le code Java ressemblerait à ceci:
#+begin_src java
public class Point{
   private double x;
   private double y;

   public Point(double x, double y) {
      this.x = x;
      this.y = y;
   }
   //Getters, setters...
   public void display() {
      System.out.println("(" + x + ", " + y +")");
   }
}
#+end_src

#+begin_src java
  public class ColoredPoint extends Point {
     private Color color;

     public ColoredPoint(double x, double y, Color color) {
	super(x, y);
	this.color = color;
     }
     //Getters, setters...
     @Override
     public void display() {
	super.display();
	System.out.println(" Color: " + this.color);
     }
  }
#+end_src
* Interfaces
Collection de méthodes qui décrit le service d'une classe ou d'un composant.
**** *Exemple "animal":*

/Compagnon/ est une *interface*, et /Chat/ et /Chien/ *héritent* de /Animal/:
#+caption: Interfaces
#+attr_latex: :width 150px :placement [H]
file:Interfaces.png

Le code Java ressemblerait à ceci:
#+begin_src java
public class Animal {
   //Constructeur, getters, setters...
   public void manger() {...}
}

public class Chien extends Animal implements Compagnon {
   //Constructeur, getters, setters
   public void etreAmical() {...}
   public void jouer() {...}

   @Override
   public void manger() {...}
}

public interface Compagnon {
   public abstract void etreAmical();
   public abstract void jouer();
}
#+end_src
* Packages
Éléments d'organisation.
#+caption: Packages
#+attr_latex: :width 200px :placement [H]
file:Packages.png
